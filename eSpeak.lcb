library org.openxtalk.library.espeak

metadata version is "0.1"
metadata author is "Paul McClernan"
metadata title is "OpenXTalk.org Speak"
metadata userVisible is "true" -- Show Widget in ... ?
metadata _ide is "true" -- ? default load at startup

use com.livecode.foreign
use com.livecode.canvas
use com.livecode.string
use com.livecode.char
use com.livecode.array
use com.livecode.list
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils
use com.livecode.system

-- espeak_ERROR espeak_Synth( const void *text,	size_t size, unsigned int position, espeak_POSITION_TYPE position_type,
--	unsigned int end_position, unsigned int flags, unsigned int* unique_identifier, void* user_data);
/* Synthesize speech for the specified text.  The speech sound data is passed to the calling
   program in buffers by means of the callback function specified by espeak_SetSynthCallback().
   The command is asynchronous: it is internally buffered and returns as soon as possible.
   If espeak_Initialize was previously called with AUDIO_OUTPUT_PLAYBACK as argument, the sound data are played by eSpeak.

   text: The text to be spoken, terminated by a zero character. It may be either 8-bit characters,
      wide characters (wchar_t), or UTF8 encoding.  Which of these is determined by the "flags"
      parameter.

   size: Equal to (or greatrer than) the size of the text data, in bytes.  This is used in order
      to allocate internal storage space for the text.  This value is not used for
      AUDIO_OUTPUT_SYNCHRONOUS mode.

   position:  The position in the text where speaking starts. Zero indicates speak from the
      start of the text.

   position_type:  Determines whether "position" is a number of characters, words, or sentences.
      Values:

   end_position:  If set, this gives a character position at which speaking will stop.  A value
      of zero indicates no end position.

   flags:  These may be OR'd together:
      Type of character codes, one of:
         espeakCHARS_UTF8     UTF8 encoding
         espeakCHARS_8BIT     The 8 bit ISO-8859 character set for the particular language.
         espeakCHARS_AUTO     8 bit or UTF8  (this is the default)
         espeakCHARS_WCHAR    Wide characters (wchar_t)
         espeakCHARS_16BIT    16 bit characters.

      espeakSSML   Elements within < > are treated as SSML elements, or if not recognised are ignored.

      espeakPHONEMES  Text within [[ ]] is treated as phonemes codes (in espeak's Hirshenbaum encoding).

      espeakENDPAUSE  If set then a sentence pause is added at the end of the text.  If not set then
         this pause is suppressed.

   unique_identifier: This must be either NULL, or point to an integer variable to
       which eSpeak writes a message identifier number.
       eSpeak includes this number in espeak_EVENT messages which are the result of
       this call of espeak_Synth().

   user_data: a pointer (or NULL) which will be passed to the callback function in
       espeak_EVENT messages.

   Return: EE_OK: operation achieved
           EE_BUFFER_FULL: the command can not be buffered;
             you may try after a while to call the function again.
	   EE_INTERNAL_ERROR.
*/

-- espeak_ERROR enum:
constant kEE_INTERNAL_ERROR is -1
constant kEE_OK is 0 -- no error
constant kEE_BUFFER_FULL is 1
constant kEE_NOT_FOUND is 2

constant espeakCHARS_AUTO is 0
constant espeakCHARS_UTF8 is  1
constant espeakCHARS_8BIT is  2
constant espeakCHARS_WCHAR is 3
constant espeakCHARS_16BIT is 4

constant espeakSSML      is  16
constant espeakPHONEMES  is  256
constant espeakENDPAUSE  is  4096
constant espeakKEEP_NAMEDATA is 8192

-- values for 'value' in espeak_SetParameter(espeakRATE, value, 0), nominally in words-per-minute
constant espeakRATE_MINIMUM  is 80
constant espeakRATE_MAXIMUM  is 450
constant espeakRATE_NORMAL   is 175

constant espeakINITIALIZE_PHONEME_EVENTS is 1
constant espeakINITIALIZE_PHONEME_IPA  is 2
constant espeakINITIALIZE_DONT_EXIT    is 0

constant ESPEAK_API_REVISION is  9

-- espeak_EVENT_TYPEs:
constant espeakEVENT_LIST_TERMINATED is 0  -- Retrieval mode: terminates the event list.
constant  espeakEVENT_WORD is 1            -- Start of word
constant  espeakEVENT_SENTENCE is 2        -- Start of sentence
constant  espeakEVENT_MARK is 3            -- Mark
constant  espeakEVENT_PLAY is 4            -- Audio element
constant  espeakEVENT_END is 5             -- End of sentence or clause
constant  espeakEVENT_MSG_TERMINATED is 6  -- End of message
constant  espeakEVENT_PHONEME is 7         -- Phoneme, if enabled in espeak_Initialize()
constant  espeakEVENT_SAMPLERATE is 8       -- internal use, set sample rate


-- espeak_PARAMETERs
constant  espeakSILENCE is 0 --  internal use
constant  espeakRATE is 1
constant  espeakVOLUME is 2
constant  espeakPITCH is 3
constant  espeakRANGE is 4
constant  espeakPUNCTUATION is 5
constant  espeakCAPITALS is 6
constant  espeakWORDGAP is 7
constant  espeakOPTIONS is 8   -- reserved for misc. options.  not yet used
constant  espeakINTONATION is 9
constant  espeakRESERVED1 is 10
constant  espeakRESERVED2 is 11
--constant  espeakEMPHASIS   -- internal use
--constant  espeakLINELENGTH -- internal use
--constant  espeakVOICETYPE  -- internal, 1=mbrola
--constant  N_SPEECH_PARAM    -- last enum

-- espeak_PUNCT_TYPEs:
constant espeakPUNCT_NONE is 0
constant espeakPUNCT_ALL is 1
constant espeakPUNCT_SOME is 2

private variable mInited as Boolean

private type eSpeak_SETTINGS is Pointer
private variable mSettings as optional eSpeak_SETTINGS

variable mScriptObject as ScriptObject


__safe foreign handler espeak_Synth( in pOutput as ZStringNative, in pSize as UIntSize, in pPosition as CUInt, in pPositionType as CUInt, in pEndPosition as CUInt, in pFlags as CUInt, in pID as optional CUInt, in pCustDataPtr as optional Pointer ) returns CSInt binds to "c:libespeak>espeak_Synth"

__safe foreign handler espeak_Initialize( in pOutput as ZStringNative, in pBufferLen as CUInt, in pVocDataPath as optional ZStringNative, in pOption as CUInt ) returns CSInt binds to "c:libespeak>espeak_Initialize"

__safe foreign handler espeak_Info(inout rPathStrPtr as optional Pointer) returns Pointer binds to "c:libespeak>espeak_Info"

-- ESPEAK_API int espeak_Initialize(espeak_AUDIO_OUTPUT output, int buflength, const char *path, int options);

/* Must be called before any synthesis functions are called.
   output: the audio data can either be played by eSpeak or passed back by the SynthCallback function.

   buflength:  The length in mS of sound buffers passed to the SynthCallback function.
            Value=0 gives a default of 200mS.
            This paramater is only used for AUDIO_OUTPUT_RETRIEVAL and AUDIO_OUTPUT_SYNCHRONOUS modes.

   path: The directory which contains the espeak-data directory, or NULL for the default location.

   options: bit 0:  1=allow espeakEVENT_PHONEME events.
            bit 1:  1= espeakEVENT_PHONEME events give IPA phoneme names, not eSpeak phoneme names
            bit 15: 1=don't exit if espeak_data is not found (used for --help)

   Returns: sample rate in Hz, or -1 (EE_INTERNAL_ERROR).
*/

constant kMCStringEncodingUTF8 is 4
__safe foreign handler MCStringEncode(in pString as String, in pEncoding as CUInt, in pIsExternalRep as CBool, out rUTF8String as Data) returns CBool binds to "<builtin>"
__safe foreign handler MCStringCreateWithCString(in pString as Pointer, out rString as String) returns CBool binds to "<builtin>"
--foreign handler MCStringCreateWithBytes(in pBytes as Pointer, in pByteCount as LCUInt, in pEncoding as CUInt, in pIsExternalRep as CBool, out rString as String) returns CBool binds to "<builtin>"
--foreign handler MCDataConvertStringToData(in pString as String, out rData as Data) returns CBool binds to "<builtin>"
__safe foreign handler MCDataGetBytePtr(in pData as Data) returns optional Pointer binds to "<builtin>"
__safe foreign handler MCMemoryAllocate(in pSize as UIntSize, out rBlockPtr as Pointer) returns CBool binds to "<builtin>"
-- allocates a block of size pSize bytes, places the pointer into rBlockPtr and returns true - or just returns false if it fails
-- MCMemoryReallocate(T *p_block, size_t p_new_size, T*& r_new_block)
__safe foreign handler MCMemoryReallocate(in rBlockPtr as Pointer, in pSize as UIntSize, out rReAllocBlockPtr as Pointer) returns CBool binds to "<builtin>"
__safe foreign handler MCMemoryDeallocate(in rBlockPtr as Pointer) returns nothing binds to "<builtin>"
__safe foreign handler MCWidgetGetMyScriptObject(out rObject as ScriptObject) returns nothing binds to "<builtin>"


/**
Setup the eSpeak Engine

Type: function

Example:
speakEnsureInit()

Returns: True on success, false or error string on failure.

Description:
Attempts to load an instance of libespeak.
*/
public handler speakEnsureInit() returns optional any
   variable tStrPtr as Pointer
   variable tString as String
   variable tWasSet as CSInt
   variable tOptions as CUInt
   variable tBufferLen as CUInt

   variable tPathStrPtr as optional Pointer
   variable tPathString as ZStringNative
   variable tSize as CUInt

	--if mInited then
	--	return mInited
   --	else
      -- ESPEAK_API const char *espeak_Info(const char **path_data);
      /* Returns the version number string.
         path_data  returns the path to espeak_data
      */
      -- #endif
      put "" into tPathString
      put nothing into tPathStrPtr
      put espeak_Info(tPathStrPtr) into tStrPtr
      log tPathString
      if MCStringCreateWithCString(tStrPtr, tString) then
         log ["lib eSpeak version:" && tString]
      end if
      if MCStringCreateWithCString(tPathStrPtr,tPathString) then
         log ["lib eSpeak voice data path:" && tPathString]
      end if

      -- buflength:  The length in mS of sound buffers passed to the SynthCallback function.  Value=0 gives a default of 200mS. This paramater is only used for AUDIO_OUTPUT_RETRIEVAL and AUDIO_OUTPUT_SYNCHRONOUS modes.
      put 0 into tBufferLen
      -- options: bit 0:  1=allow espeakEVENT_PHONEME events. bit 1:  1= espeakEVENT_PHONEME events give IPA phoneme names, not eSpeak phoneme names. bit 15: 1=don't exit if espeak_data is not found (used for --help)
      put 1 into tOptions
      put espeak_Initialize("AUDIO_OUTPUT_PLAYBACK",tBufferLen,nothing,tOptions) into tWasSet
      log tWasSet -- logs 22050, which is KHz sample rate
      put "Hello eSpeak!" into tString
      put 14 into tSize
      -- POS_CHARACTER = 1, POS_WORD, POS_SENTENCE
      -- put espeakCHARS_AUTO = 0 + espeakENDPAUSE = 4096 into tFlags
      put espeak_Synth(tString,tSize,0,1,0,4096,nothing,nothing) into tWasSet -- crashes engine
      -- log tWasSet
end handler
-- https://www.youtube.com/watch?v=MC2K6yotimY

-- https://www.youtube.com/watch?v=lC-i3Q-2KcY
/**
#include</usr/local/include/espeak/speak_lib.h>
int main(int argc, char* argv[] )
{
char text[] = {"الله لطيف "};
espeak_Initialize(AUDIO_OUTPUT_PLAYBACK, 0, NULL, 0 );
espeak_SetVoiceByName("ar");
unsigned int size = 0;
while(text[size]!='\0') size++;
unsigned int flags=espeakCHARS_AUTO | espeakENDPAUSE;
espeak_Synth( text, size+1, 0,POS_CHARACTER,0, flags, NULL, NULL );
espeak_Synchronize( );
return 0;
}`
**/


/*
   TITLE: Simple C/C++ Program showing use of speak_lib.h
   AUTHOR:Dhananjay Singh
   LICENSE: GPLv2

#include <string.h>
#include <malloc.h>
#include <./src/speak_lib.h>


espeak_POSITION_TYPE position_type;
espeak_AUDIO_OUTPUT output;
char *path=NULL;
int Buflength = 500, Options=0;
void* user_data;
t_espeak_callback *SynthCallback;
espeak_PARAMETER Parm;

/*
   FROM speak_lib.h :

   output: the audio data can either be played by eSpeak or passed back by the SynthCallback function.

   Buflength:  The length in mS of sound buffers passed to the SynthCallback function.

   options: bit 0: 1=allow espeakEVENT_PHONEME events.

   path: The directory which contains the espeak-data directory, or NULL for the default location.

   espeak_Initialize() Returns: sample rate in Hz, or -1 (EE_INTERNAL_ERROR).


char Voice[] = {"lt+klatt2"};
/*
    Voice: Refer to speak_lib.h

char text[30] = {"Labas. Šauk. Laikas. Taika"};
unsigned int Size,position=0, end_position=0, flags=espeakCHARS_AUTO, *unique_identifier;

/*
   text: The text to be spoken, terminated by a zero character. It may be either 8-bit characters,
      wide characters (wchar_t), or UTF8 encoding.  Which of these is determined by the "flags"
      parameter.

   Size: Equal to (or greatrer than) the size of the text data, in bytes.  This is used in order
      to allocate internal storage space for the text.  This value is not used for
      AUDIO_OUTPUT_SYNCHRONOUS mode.

   position:  The position in the text where speaking starts. Zero indicates speak from the
      start of the text.

   position_type:  Determines whether "position" is a number of characters, words, or sentences.
      Values:

   end_position:  If set, this gives a character position at which speaking will stop.  A value
      of zero indicates no end position.

   flags:  These may be OR'd together:
      Type of character codes, one of:
         espeakCHARS_UTF8     UTF8 encoding
         espeakCHARS_8BIT     The 8 bit ISO-8859 character set for the particular language.
         espeakCHARS_AUTO     8 bit or UTF8  (this is the default)
         espeakCHARS_WCHAR    Wide characters (wchar_t)

      espeakSSML   Elements within < > are treated as SSML elements, or if not recognised are ignored.

      espeakPHONEMES  Text within [[ ]] is treated as phonemes codes (in espeak's Hirshenbaum encoding).

      espeakENDPAUSE  If set then a sentence pause is added at the end of the text.  If not set then
         this pause is suppressed.

   unique_identifier: message identifier; helpful for identifying later
     data supplied to the callback.

   user_data: pointer which will be passed to the callback function.

   espeak_Synth() Returns: EE_OK: operation achieved
                           EE_BUFFER_FULL: the command can not be buffered;
                           you may try after a while to call the function again.
                    	   EE_INTERNAL_ERROR.

int main(int argc, char* argv[] )
{
    output = AUDIO_OUTPUT_PLAYBACK;
    int I, Run = 1, L;
    espeak_Initialize(output, Buflength, path, Options );
    //espeak_SetVoiceByName(Voice);
    const char *langNativeString = "lt"; //Default to US English
    espeak_VOICE voice;
	memset(&voice, 0, sizeof(espeak_VOICE)); // Zero out the voice first
	voice.languages = langNativeString;
	voice.name = "klatt";
	voice.variant = 2;
	voice.gender = 1;
	espeak_SetVoiceByProperties(&voice);
    Size = strlen(text)+1;
    printf("Saying  '%s'",text);
    espeak_Synth( text, Size, position, position_type, end_position, flags,
    unique_identifier, user_data );
    espeak_Synchronize( );
    printf("\n:Done\n");
    return 0;
}
*/


/*
//speech synth
//using espeak
//Written by Bill Heaster
/*
 * This is the most minimalistic approach to getting espeak running with the C api
 *
 *
 * compile with gcc -W -o myEspeak myEspeak.c -lespeak
 *
 * This was tested in ubuntu 15.10 I had to download the following packages.
 * espeak-data
 * libespeak-dev
 *
 * */

/*
#include <stdio.h>
#include <string.h>
#include <espeak/speak_lib.h>


/* Must be called before any synthesis functions are called.
   This specifies a function in the calling program which is called when a buffer of
   speech sound data has been produced.

   The callback function is of the form:

int SynthCallback(short *wav, int numsamples, espeak_EVENT *events);

   wav:  is the speech sound data which has been produced.
      NULL indicates that the synthesis has been completed.

   numsamples: is the number of entries in wav.  This number may vary, may be less than
      the value implied by the buflength parameter given in espeak_Initialize, and may
      sometimes be zero (which does NOT indicate end of synthesis).

   events: an array of espeak_EVENT items which indicate word and sentence events, and
      also the occurance if <mark> and <audio> elements within the text.  The list of
      events is terminated by an event of type = 0.


   Callback returns: 0=continue synthesis,  1=abort synthesis.

//don't delete this callback function.
int SynthCallback(short *wav, int numsamples, espeak_EVENT *events)
{

    return 0;
}

*/

end library
